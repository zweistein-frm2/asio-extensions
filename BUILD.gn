declare_args() {
  # AsioExt can be built as a header only library or a separate compilation.
  # Enabling this adds the ASIOEXT_SEPARATE_COMPILATION define.
  asioext_header_only = true

  # Use the Boost variant of Asio.
  # see: ASIOEXT_USE_BOOST_ASIO
  asioext_use_boost_asio = true

  # Build without external dependencies.
  # see: ASIOEXT_STANDALONE
  asioext_standalone = false

  # Enable Boost.Filesystem path support.
  # see: ASIOEXT_DISABLE_BOOST_FILESYSTEM
  asioext_use_boost_fs = false

  # Treat char* filenames as UTF-8 encoded on Windows.
  # see: ASIOEXT_WINDOWS_USE_UTF8_FILENAMES
  asioext_win_use_utf8 = false
}

assert(!asioext_standalone || !asioext_use_boost_fs,
       "Cannot use asioext_standalone with asioext_use_boost_fs")

config("asioext_config") {
  defines = []
  include_dirs = [ "include" ]

  if (is_win) {
    defines += [ "_SILENCE_CXX17_ALLOCATOR_VOID_DEPRECATION_WARNING" ]
  }

  if (!asioext_header_only) {
    defines += [ "ASIOEXT_SEPARATE_COMPILATION" ]
  }
  if (asioext_use_boost_asio) {
    defines += [ "ASIOEXT_USE_BOOST_ASIO" ]
  }
  if (asioext_standalone) {
    defines += [ "ASIOEXT_STANDALONE" ]
  }
  if (!asioext_use_boost_fs && !asioext_standalone) {
    # Implied for asioext_standalone = true
    defines += [ "ASIOEXT_DISABLE_BOOST_FILESYSTEM" ]
  }

  # Defines that only control code in the implementation can
  # be omitted here:
  if (asioext_win_use_utf8 && is_win && asioext_header_only) {
    defines += [ "ASIOEXT_WINDOWS_USE_UTF8_FILENAMES" ]
  }
}

config("internal") {
  defines = [ "ASIOEXT_SOURCE" ]

  if (asioext_win_use_utf8 && is_win && !asioext_header_only) {
    defines += [ "ASIOEXT_WINDOWS_USE_UTF8_FILENAMES" ]
  }
}

source_set("asioext") {
  sources = [
    "include/asioext/asioext.hpp",
    "include/asioext/basic_file.hpp",
    "include/asioext/cancellation_token.hpp",
    "include/asioext/chrono.hpp",
    "include/asioext/compose.hpp",
    "include/asioext/connect.hpp",
    "include/asioext/detail/asio_version.hpp",
    "include/asioext/detail/async_result.hpp",
    "include/asioext/detail/bind_handler.hpp",
    "include/asioext/detail/buffer.hpp",
    "include/asioext/detail/buffer_sequence_adapter.hpp",
    "include/asioext/detail/chrono.hpp",
    "include/asioext/detail/config.hpp",
    "include/asioext/detail/coroutine.hpp",
    "include/asioext/detail/cstdint.hpp",
    "include/asioext/detail/enum.hpp",
    "include/asioext/detail/error.hpp",
    "include/asioext/detail/error_code.hpp",
    "include/asioext/detail/handler_type.hpp",
    "include/asioext/detail/impl/chrono.hpp",
    "include/asioext/detail/memory.hpp",
    "include/asioext/detail/move_support.hpp",
    "include/asioext/detail/mutex.hpp",
    "include/asioext/detail/posix_file_ops.hpp",
    "include/asioext/detail/service_base.hpp",
    "include/asioext/detail/thread.hpp",
    "include/asioext/detail/thread_group.hpp",
    "include/asioext/detail/throw_error.hpp",
    "include/asioext/detail/throw_exception.hpp",
    "include/asioext/detail/url_parser.hpp",
    "include/asioext/detail/win_file_ops.hpp",
    "include/asioext/detail/win_path.hpp",
    "include/asioext/duplicate.hpp",
    "include/asioext/error.hpp",
    "include/asioext/exception.hpp",
    "include/asioext/experimental/buffered_stream.hpp",
    "include/asioext/file.hpp",
    "include/asioext/file_attrs.hpp",
    "include/asioext/file_handle.hpp",
    "include/asioext/file_perms.hpp",
    "include/asioext/impl/connect.hpp",
    "include/asioext/impl/file_handle.hpp",
    "include/asioext/impl/file_handle_posix.hpp",
    "include/asioext/impl/file_handle_win.hpp",
    "include/asioext/impl/read_file.hpp",
    "include/asioext/impl/thread_pool_file_service.hpp",
    "include/asioext/impl/write_file.hpp",
    "include/asioext/is_raw_byte_container.hpp",
    "include/asioext/linear_buffer.hpp",
    "include/asioext/open.hpp",
    "include/asioext/open_flags.hpp",
    "include/asioext/read_file.hpp",
    "include/asioext/scoped_file_handle.hpp",
    "include/asioext/seek_origin.hpp",
    "include/asioext/socks/client.hpp",
    "include/asioext/socks/constants.hpp",
    "include/asioext/socks/detail/client.hpp",
    "include/asioext/socks/detail/protocol.hpp",
    "include/asioext/socks/error.hpp",
    "include/asioext/socks/impl/client.hpp",
    "include/asioext/standard_streams.hpp",
    "include/asioext/thread_pool_file_service.hpp",
    "include/asioext/unique_file_handle.hpp",
    "include/asioext/unique_handler.hpp",
    "include/asioext/version.hpp",
    "include/asioext/work.hpp",
    "include/asioext/write_file.hpp",
  ]

  if (!asioext_header_only) {
    sources += [
      "include/asioext/detail/impl/url_parser.cpp",
      "include/asioext/impl/cancellation_token.cpp",
      "include/asioext/impl/chrono.cpp",
      "include/asioext/impl/connect.cpp",
      "include/asioext/impl/duplicate.cpp",
      "include/asioext/impl/error.cpp",
      "include/asioext/impl/file_handle.cpp",
      "include/asioext/impl/open.cpp",
      "include/asioext/impl/open_flags.cpp",
      "include/asioext/impl/standard_streams.cpp",
      "include/asioext/impl/thread_pool_file_service.cpp",
      "include/asioext/impl/unique_file_handle.cpp",
      "include/asioext/impl/unique_handler.cpp",
      "include/asioext/socks/detail/impl/protocol.cpp",
      "include/asioext/socks/impl/socks_error.cpp",
    ]
  }

  if (is_win) {
    sources += [
      "include/asioext/detail/win_file_ops.hpp",
      "include/asioext/detail/win_path.hpp",
    ]

    if (!asioext_header_only) {
      sources += [
        "include/asioext/detail/impl/win_file_ops.cpp",
        "include/asioext/detail/impl/win_path.cpp",
        "include/asioext/impl/file_handle_win.cpp",
      ]
    }
  } else {
    sources += [ "include/asioext/detail/posix_file_ops.hpp" ]
    if (!asioext_header_only) {
      sources += [
        "include/asioext/detail/impl/posix_file_ops.cpp",
        "include/asioext/impl/file_handle_posix.cpp",
      ]
    }
  }

  configs += [ ":internal" ]

  public_configs = [ ":asioext_config" ]
  public_deps = []

  if (!asioext_standalone) {
    # Header-only dependency
    public_deps += [ "$external/boost" ]
  }

  if (asioext_use_boost_fs) {
    public_deps += [ "$external/boost/libs/filesystem" ]
  }

  if (asioext_use_boost_asio) {
    public_deps += [
      "$external/boost/libs/asio",
      "$external/boost/libs/system",
    ]
  } else {
    public_deps += [ "$external/asio" ]
  }
}

executable("asioext_unittests") {
  testonly = true

  sources = [
    "test/basic_file.cpp",
    "test/chrono.cpp",
    "test/compose.cpp",
    "test/file_handle.cpp",
    "test/linear_buffer.cpp",
    "test/main.cpp",
    "test/open.cpp",
    "test/open_flags.cpp",
    "test/read_file.cpp",
    "test/test_file_rm_guard.cpp",
    "test/test_file_writer.cpp",
    "test/unique_handler.cpp",
    "test/url_parser.cpp",
    "test/write_file.cpp",
  ]

  if (is_win) {
    sources += [ "test/win_path.cpp" ]
  }

  deps = [
    ":asioext",
    "$external/boost/libs/filesystem",
    "$external/boost/libs/test:unit_test_framework",
  ]
}

group("examples") {
  if (asioext_use_boost_asio) {
    deps = [
      "example/cpp03:cp",
      "example/cpp03:tee",
    ]
  } else {
    deps = [
      "example/cpp11:cp",
      "example/cpp11:simple",
      "example/cpp11:socks_http_client",
      "example/cpp11:tee",
      "example/cpp11:tee_async",
    ]
  }
}
